Index: vendor/magento/module-catalog/Model/ProductRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- /vendor/magento/module-catalog/Model/ProductRepository.php	(date 1538059039000)
+++ /vendor/magento/module-catalog/Model/ProductRepository.php	(date 1538059487000)
@@ -232,7 +232,8 @@
     public function get($sku, $editMode = false, $storeId = null, $forceReload = false)
     {
         $cacheKey = $this->getCacheKey([$editMode, $storeId]);
-        if (!isset($this->instances[$sku][$cacheKey]) || $forceReload) {
+        $cachedProduct = $this->getProductFromLocalCache($sku, $cacheKey);
+        if ($cachedProduct === null || $forceReload) {
             $product = $this->productFactory->create();
 
             $productId = $this->resourceModel->getIdBySku($sku);
@@ -247,11 +248,10 @@
             }
             $product->load($productId);
             $this->cacheProduct($cacheKey, $product);
+            $cachedProduct = $product;
         }
-        if (!isset($this->instances[$sku])) {
-            $sku = trim($sku);
-        }
-        return $this->instances[$sku][$cacheKey];
+
+        return $cachedProduct;
     }
 
     /**
@@ -307,7 +307,7 @@
     private function cacheProduct($cacheKey, \Magento\Catalog\Api\Data\ProductInterface $product)
     {
         $this->instancesById[$product->getId()][$cacheKey] = $product;
-        $this->instances[$product->getSku()][$cacheKey] = $product;
+        $this->saveProductInLocalCache($product, $cacheKey);
 
         if ($this->cacheLimit && count($this->instances) > $this->cacheLimit) {
             $offset = round($this->cacheLimit / -2);
@@ -340,7 +340,7 @@
                 unset($this->instancesById[$productData['id']]);
                 $product = $this->getById($productData['id']);
             } else {
-                unset($this->instances[$productData['sku']]);
+                $this->removeProductFromLocalCache($productData['sku']);
                 $product = $this->get($productData['sku']);
             }
         }
@@ -495,7 +495,7 @@
             if ($tierPrices !== null) {
                 $product->setData('tier_price', $tierPrices);
             }
-            unset($this->instances[$product->getSku()]);
+            $this->removeProductFromLocalCache($product->getSku());
             unset($this->instancesById[$product->getId()]);
             $this->resourceModel->save($product);
         } catch (ConnectionException $exception) {
@@ -529,7 +529,7 @@
         } catch (\Exception $e) {
             throw new \Magento\Framework\Exception\CouldNotSaveException(__('Unable to save product'), $e);
         }
-        unset($this->instances[$product->getSku()]);
+        $this->removeProductFromLocalCache($product->getSku());
         unset($this->instancesById[$product->getId()]);
         return $this->get($product->getSku(), false, $product->getStoreId());
     }
@@ -542,7 +542,7 @@
         $sku = $product->getSku();
         $productId = $product->getId();
         try {
-            unset($this->instances[$product->getSku()]);
+            $this->removeProductFromLocalCache($product->getSku());
             unset($this->instancesById[$product->getId()]);
             $this->resourceModel->delete($product);
         } catch (ValidatorException $e) {
@@ -552,7 +552,7 @@
                 __('Unable to remove product %1', $sku)
             );
         }
-        unset($this->instances[$sku]);
+        $this->removeProductFromLocalCache($sku);
         unset($this->instancesById[$productId]);
         return true;
     }
@@ -675,4 +675,52 @@
         }
         return $this->collectionProcessor;
     }
+    /**
+     * Gets product from the local cache by SKU.
+     *
+     * @param string $sku
+     * @param string $cacheKey
+     * @return Product|null
+     */
+    private function getProductFromLocalCache(string $sku, string $cacheKey)
+    {
+        $preparedSku = $this->prepareSku($sku);
+        if (!isset($this->instances[$preparedSku])) {
+            return null;
+        }
+        return $this->instances[$preparedSku][$cacheKey] ?? null;
+    }
+    /**
+     * Removes product in the local cache.
+     *
+     * @param string $sku
+     * @return void
+     */
+    private function removeProductFromLocalCache(string $sku)
+    {
+        $preparedSku = $this->prepareSku($sku);
+        unset($this->instances[$preparedSku]);
+    }
+    /**
+     * Saves product in the local cache.
+     *
+     * @param Product $product
+     * @param string $cacheKey
+     * @return void
+     */
+    private function saveProductInLocalCache(Product $product, string $cacheKey)
+    {
+        $preparedSku = $this->prepareSku($product->getSku());
+        $this->instances[$preparedSku][$cacheKey] = $product;
+    }
+    /**
+     * Converts SKU to lower case and trims.
+     *
+     * @param string $sku
+     * @return string
+     */
+    private function prepareSku(string $sku): string
+    {
+        return mb_strtolower(trim($sku));
+    }
 }
